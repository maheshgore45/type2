codes

import java.util.Scanner;
class Fibonacci{
    static int fibIter(int n){
        if(n <= 1){
            return n;
        }

        int a = 0, b = 1, fib = 1;
        for(int i = 2; i <= n; i++){
            fib = a + b;
            a = b;
            b = fib;
        }
        return fib;
    }

    static int fibRecur(int n){
        if(n <= 1){
            return n;
        } else {
            return fibRecur(n-1) + fibRecur(n-2);
        }
    }

    public static void main(String[] arg){
        Scanner sc = new Scanner(System.in);
        System.out.println("Select the method...");
        System.out.println("1.. Iterative ");
        System.out.println("2.. Recurssive ");
        System.out.print("Enter your choice : ");
        int ch = sc.nextInt();
        System.out.print("Enter the value of n : ");
        int n = sc.nextInt();

        switch(ch){
            case 1: 
                System.out.println("Fibonacci is " + fibIter(n));
                break;
            case 2: 
                System.out.println("Fibonacci is " + fibRecur(n));
                break;
            default:
                System.out.println("Invalid choice..");
        }
    }
}


import java.util.Scanner;
class NQueens{
    private int N;
    private int[][] board;

    NQueens(int n){
        N = n;
        board = new int[N][N];
    }

    void printBoard(){
        for(int i = 0; i < N; i++){
            for(int j = 0; j < N; j++){
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    boolean isSafe(int row, int col){
        for(int i = 0; i < row; i++){
            if(board[i][col] == 1){
                return false;
            }
        }

        for(int i = row, j = col; i >= 0 && j >= 0; i--, j--){
            if(board[i][j] == 1){
                return false;
            }
        }

        for(int i = row, j = col; i >= 0 && j < N; i--, j++){
            if(board[i][j] == 1){
                return false;
            }
        }
        return true;
    }

    boolean solve(int row){
        if(row == N){
            printBoard();
            return true; 
        }

        for(int col = 0; col < N; col++){
            if(isSafe(row,col)){
                board[row][col] = 1;
                if(solve(row + 1)) return true;
                board[row][col] = 0;
            }
        }
        return false;
    }  

    public static void main(String[] arg){
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the no of queens to be placed : ");
        int n = sc.nextInt();
        NQueens queen = new NQueens(n);
        // queen.board[0][1] = 1;
        queen.solve(0);
    }
}



import java.util.*;
class Item{
    int value, weight;
    
    Item(int value, int weight){
        this.value = value;
        this.weight =  weight;
    }
}

class itemcomparator implements Comparator<Item>{
    // @override
    public int compare(Item a, Item b){
        double r1 = (double) (a.value / a.weight);
        double r2 = (double) (b.value / b.weight);
        
        if(r1 < r2){
            return 1;
        } else if (r1 > r2){
            return -1;
        } else {
            return 0;
        }
    }
}

public class solve{
    
    static double fractional(int W, int n, Item arr[]){
        Arrays.sort(arr, new itemcomparator());
        
        int curr = 0;
        double total = 0.0;
        
        for(int i = 0; i < n; i++){
            if (curr + arr[i].weight <= W){
                curr += arr[i].weight;
                total += arr[i].value;
            } else {
                int remain = W - curr;
                total += (double) ( arr[i].value / arr[i].weight) * (double) remain ;
                break;
            }
        }
        return total;
    }
    
    public static void main(String[] args){
        // int n = 3, weight = 50;
        // Item arr[] = {new Item (100,20),new Item(60,10),new Item(120,30)};
        // double ans = fractional(weight, n, arr);
        // System.out.println("The maximum value is "+ans);

        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the no of items : ");
        int n = sc.nextInt();
        Item arr[] = new Item[n];
        System.out.print("Enter the capacity : ");
        int weight = sc.nextInt();
        
        for(int i = 0; i < n; i++){
            System.out.print("Enter the value : ");
            int val = sc.nextInt();
            System.out.print("Enter the weight : ");
            int wt = sc.nextInt();
            arr[i] = new Item(val, wt);
        }
        System.out.println("The maximum value is : " + fractional(weight, n, arr));
    }
}


import java.util.Scanner;

public class Knapsack{
    public static int knapsack(int[] weights, int[] values, int capacity){
        int n = values.length;
        int[][] dp = new int[n + 1][capacity + 1];
        
        for(int i = 1; i <= n; i++){
            for(int w = 0; w <= capacity; w++){
                if(weights[i - 1] <= w){
                    dp[i][w] = Math.max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }
        return dp[n][capacity];
    }
    
    public static void main(String[] arg){
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter the no of values: ");
        int n = sc.nextInt();
        
        int[] weights = new int[n];
        int[] values = new int[n];
        
        System.out.println("Enter the values.....");
        
        for(int i = 0; i < n; i++){
            System.out.print("Enter the value of " + (i + 1) + " item :");
            values[i] = sc.nextInt();
            System.out.print("Enter the weight of " + (i + 1) + " item :");
            weights[i] = sc.nextInt();
        }
        
        System.out.print("Enter the capacity of Knapsack :");
        int capacity = sc.nextInt();
        
        System.out.println("The maximum value is : " + knapsack(weights, values, capacity));
    }
}















// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ProductInventory {
    
    struct Product {
        string name;
        uint quantity;
    }

    mapping(uint => Product) public products;
    uint public productCount;

    // Function to receive products
    function receiveProduct(string memory _name, uint _quantity) public {
        productCount++;
        products[productCount] = Product(_name, _quantity);
    }

    // Function to sell products
    function sellProduct(uint _id, uint _quantity) public {
        require(_id > 0 && _id <= productCount, "Invalid Product ID");
        require(products[_id].quantity >= _quantity, "Not enough stock");
        products[_id].quantity -= _quantity;
    }

    // Function to display stock
    function displayStock(uint _id) public view returns (string memory, uint) {
        require(_id > 0 && _id <= productCount, "Invalid Product ID");
        return (products[_id].name, products[_id].quantity);
    }
}
----------------------------------------------------------------------------------------------------
bct student - 

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentRegistry {
    struct Student {
        string name;
        uint256 age;
        uint256 rollNumber;
    }

    Student[] private students;

    event StudentAdded(string name, uint256 age, uint256 rollNumber);

    event ReceivedEther(address indexed sender, uint256 value);

    fallback() external payable {
        emit ReceivedEther(msg.sender, msg.value);
    }

    function addStudent(string memory name, uint256 age, uint256 rollNumber) public {
        students.push(Student(name, age, rollNumber));
        emit StudentAdded(name, age, rollNumber); // Log event when student is added
    }

    function getStudent(uint256 index) public view returns (string memory, uint256, uint256) {
        require(index < students.length, "Student not found");
        return (students[index].name, students[index].age, students[index].rollNumber);
    }

    function getStudentCount() public view returns (uint256) {
        return students.length;
    }

    receive() external payable {
        emit ReceivedEther(msg.sender, msg.value);
    }
}
--------------------------------------------------------------------------------------------------------------
bct bank - 
// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.6.0;

contract MyBank
{
    mapping(address=> uint ) private _balances;
    address public owner;
    event LogDepositeMade(address accountHoder, uint amount );

    constructor () public
     {
         owner=msg.sender;
         emit LogDepositeMade(msg.sender, 1000);
     }

        function deposite() public payable  returns (uint)
        {
            
        require ((_balances[msg.sender] + msg.value) >  _balances[msg.sender] && msg.sender!=address(0));
        _balances[msg.sender] += msg.value;
        emit LogDepositeMade(msg.sender , msg.value);
        return _balances[msg.sender];
        } 

        function withdraw (uint withdrawAmount) public  returns (uint)
        {

                require (_balances[msg.sender] >= withdrawAmount);
                require(msg.sender!=address(0));
                require (_balances[msg.sender] > 0);
                _balances[msg.sender]-= withdrawAmount;
                msg.sender.transfer(withdrawAmount);
                emit LogDepositeMade(msg.sender , withdrawAmount);
                return _balances[msg.sender];

        }

        function viewBalance() public view returns (uint)
        {
            return _balances[msg.sender];
        }  
}
--------------------------------------------------------------------------------------------------------------
bct customer - 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CustomerData {
    
    // Structure to hold customer data
    struct Customer {
        uint id;
        string name;
        string email;
        uint balance;
    }

    // Array to store customers
    Customer[] public customers;
    uint public customerCount = 0;

    // Function to add a new customer
    function addCustomer(string memory _name, string memory _email, uint _balance) public {
        customerCount++;
        customers.push(Customer(customerCount, _name, _email, _balance));
    }

    // Function to retrieve customer data by ID
    function getCustomer(uint _id) public view returns (uint, string memory, string memory, uint) {
        require(_id > 0 && _id <= customerCount, "Customer ID is invalid");
        Customer memory cust = customers[_id - 1]; // Array is 0-indexed
        return (cust.id, cust.name, cust.email, cust.balance);
    }

    // Fallback function - reverts any call with invalid function
    fallback() external payable {
        revert("This contract does not accept direct payments");
    }

    // Receive function (optional, if you want to handle Ether)
    receive() external payable {
        // Logic to handle Ether (if required)
    }
}
--------------------------------------------------------------------------------------------------------------

bct employee - 
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EmployeeData {
    
    // Structure to hold employee data
    struct Employee {
        uint id;
        string name;
        uint age;
        string position;
        uint salary;
    }

    // Array to hold list of employees
    Employee[] public employees;
    uint public employeeCount = 0;

    // Function to add a new employee
    function addEmployee(string memory _name, uint _age, string memory _position, uint _salary) public {
        employeeCount++;
        employees.push(Employee(employeeCount, _name, _age, _position, _salary));
    }

    // Function to retrieve an employee by ID
    function getEmployee(uint _id) public view returns (uint, string memory, uint, string memory, uint) {
        require(_id > 0 && _id <= employeeCount, "Invalid Employee ID");
        Employee memory emp = employees[_id - 1];  // Array is 0-indexed
        return (emp.id, emp.name, emp.age, emp.position, emp.salary);
    }

    // Fallback function
    fallback() external payable {
        revert("This contract does not accept direct payments");
    }
    
    // Receive function (optional, if you want to receive Ether)
    receive() external payable {
        // If you want to accept Ether, you can implement this
    }
}

--------------------------------------------------------------------------------------------------------------

docker run -d -p 27018:27017 mongo



docker build -t image-name .

docker images



docker run -p 3000:3000 image_name


docker run -p 3000:3000 -e DATABASE_URL = "postgress://database@1/default=temp_collection" image_name
